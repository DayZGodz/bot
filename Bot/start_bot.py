#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Bot de Tickets Avan√ßado
Este script verifica as configura√ß√µes antes de iniciar o bot
"""

import os
import sys
import subprocess
import psutil
import time
from dotenv import load_dotenv

def verificar_e_fechar_sessoes_existentes():
    """Verifica e fecha outras sess√µes do bot automaticamente"""
    print("üîç Verificando sess√µes existentes do bot...")
    
    # Pega o PID do processo atual
    current_pid = os.getpid()
    bot_processes = []
    
    try:
        # Procura por processos Python executando arquivos relacionados ao bot
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                # Verifica se √© um processo Python
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    cmdline = proc.info['cmdline']
                    if cmdline:
                        cmdline_str = ' '.join(cmdline).lower()
                        # Verifica se est√° executando o bot (main.py, start_bot.py ou cont√©m 'bot')
                        if any(keyword in cmdline_str for keyword in ['main.py', 'start_bot.py', 'discord', 'ticket']):
                            if proc.info['pid'] != current_pid:  # N√£o inclui o processo atual
                                bot_processes.append(proc.info['pid'])
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao verificar processos: {e}")
    
    if bot_processes:
        print(f"üîÑ Encontradas {len(bot_processes)} sess√£o(√µes) existente(s) do bot")
        print("üõë Fechando sess√µes anteriores automaticamente...")
        
        for pid in bot_processes:
            try:
                proc = psutil.Process(pid)
                proc.terminate()  # Tentativa gentil de encerrar
                print(f"   ‚úÖ Processo {pid} encerrado")
            except psutil.NoSuchProcess:
                continue
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao encerrar processo {pid}: {e}")
        
        # Aguarda um pouco para os processos serem encerrados
        time.sleep(2)
        
        # For√ßa o encerramento dos processos restantes
        for pid in bot_processes:
            try:
                proc = psutil.Process(pid)
                if proc.is_running():
                    proc.kill()  # For√ßa o encerramento
                    print(f"   üî• Processo {pid} for√ßado a encerrar")
            except psutil.NoSuchProcess:
                continue
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao for√ßar encerramento do processo {pid}: {e}")
        
        print("‚úÖ Sess√µes anteriores encerradas com sucesso!")
    else:
        print("‚úÖ Nenhuma sess√£o anterior encontrada")
    
    # Limpa arquivos tempor√°rios de √°udio
    try:
        temp_audio_dir = "temp_audio"
        if os.path.exists(temp_audio_dir):
            for filename in os.listdir(temp_audio_dir):
                if filename.startswith("voice_") and filename.endswith(".mp3"):
                    os.remove(os.path.join(temp_audio_dir, filename))
            print("üßπ Arquivos tempor√°rios de √°udio limpos")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao limpar arquivos tempor√°rios: {e}")

def verificar_configuracoes():
    """Verifica se todas as configura√ß√µes necess√°rias est√£o presentes"""
    print("üîç Verificando configura√ß√µes...")
    
    # Cria arquivo .env se n√£o existir
    if not os.path.exists('.env'):
        print("üìù Arquivo .env n√£o encontrado. Criando arquivo b√°sico...")
        env_content = """# Configura√ß√µes do Bot Discord FavelaZ
BOT_TOKEN=seu_bot_token_aqui

# Configura√ß√µes de Servidor  
TICKET_CATEGORY_ID=0
SUPPORT_ROLE_ID=0
AUDIO_CHANNEL_ID=0

# Configura√ß√µes do ElevenLabs (Voz)
ELEVENLABS_API_KEY=sua_api_key_aqui
VOICE_ID=sua_voice_id_aqui

# IDs Administrativos (Configurados automaticamente pelo !setup_servidor)
ADMIN_CATEGORY_ID=0
TICKETS_CHANNEL_ID=0
INFO_CHANNEL_ID=0
"""
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(env_content)
            print("‚úÖ Arquivo .env criado! Configure-o com seus dados.")
        except Exception as e:
            print(f"‚ùå Erro ao criar .env: {e}")
    
    # Carrega as vari√°veis de ambiente
    load_dotenv()
    
    # Configura√ß√µes obrigat√≥rias
    configs_obrigatorias = [
        ("BOT_TOKEN", "Token do bot Discord"),
        ("TICKET_CATEGORY_ID", "ID da categoria de tickets"),
        ("SUPPORT_ROLE_ID", "ID do cargo de suporte"),
        ("AUDIO_CHANNEL_ID", "ID do canal de √°udio")
    ]
    
    # Configura√ß√µes opcionais
    configs_opcionais = [
        ("ELEVENLABS_API_KEY", "Chave da API ElevenLabs"),
        ("VOICE_ID", "ID da voz para clonagem")
    ]
    
    missing_configs = []
    
    # Verifica configura√ß√µes obrigat√≥rias
    for config, descricao in configs_obrigatorias:
        if not os.getenv(config):
            missing_configs.append(f"‚ùå {config} - {descricao}")
        else:
            print(f"‚úÖ {config} - Configurado")
    
    # Verifica configura√ß√µes opcionais
    for config, descricao in configs_opcionais:
        if not os.getenv(config):
            print(f"‚ö†Ô∏è  {config} - {descricao} (opcional)")
        else:
            print(f"‚úÖ {config} - Configurado")
    
    if missing_configs:
        print("\n‚ùå CONFIGURA√á√ïES FALTANDO:")
        for config in missing_configs:
            print(f"  {config}")
        print("\nüìù Crie um arquivo .env com as configura√ß√µes necess√°rias.")
        print("   Consulte o README.md para mais informa√ß√µes.")
        return False
    
    print("\n‚úÖ Todas as configura√ß√µes obrigat√≥rias est√£o presentes!")
    return True

def verificar_dependencias():
    """Verifica se as depend√™ncias est√£o instaladas"""
    print("\nüîç Verificando depend√™ncias...")
    
    dependencias = [
        ('discord', 'discord.py'),
        ('sklearn', 'scikit-learn'),
        ('requests', 'requests'),
        ('dotenv', 'python-dotenv')
    ]
    
    missing_deps = []
    
    for module, pip_name in dependencias:
        try:
            __import__(module)
            print(f"‚úÖ {pip_name}")
        except ImportError:
            missing_deps.append(pip_name)
            print(f"‚ùå {pip_name}")
    
    if missing_deps:
        print(f"\n‚ùå Depend√™ncias faltando: {', '.join(missing_deps)}")
        print("üí° Execute: pip install -r requirements.txt")
        return False
    
    print("\n‚úÖ Todas as depend√™ncias est√£o instaladas!")
    return True

def verificar_arquivos():
    """Verifica se os arquivos necess√°rios existem"""
    print("\nüîç Verificando estrutura de arquivos...")
    
    arquivos_necessarios = [
        ('main.py', 'Arquivo principal do bot'),
        ('cogs/tickets.py', 'Sistema de tickets'),
        ('cogs/ai.py', 'Sistema de IA'),
        ('cogs/voice_system.py', 'Sistema de voz')
    ]
    
    arquivos_opcionais = [
        ('hold_music.mp3', 'M√∫sica de espera para o sistema de voz')
    ]
    
    missing_files = []
    
    for arquivo, descricao in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo}")
        else:
            missing_files.append(f"‚ùå {arquivo} - {descricao}")
    
    for arquivo, descricao in arquivos_opcionais:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo}")
        else:
            print(f"‚ö†Ô∏è  {arquivo} - {descricao} (opcional)")
    
    if missing_files:
        print("\n‚ùå ARQUIVOS FALTANDO:")
        for arquivo in missing_files:
            print(f"  {arquivo}")
        return False
    
    print("\n‚úÖ Todos os arquivos necess√°rios est√£o presentes!")
    return True

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ Iniciando Bot de Tickets Avan√ßado com IA")
    print("=" * 50)
    
    # PRIMEIRO: Verifica e fecha sess√µes existentes
    verificar_e_fechar_sessoes_existentes()
    print("")
    
    # Verifica se tudo est√° configurado corretamente
    if not verificar_arquivos():
        sys.exit(1)
    
    if not verificar_dependencias():
        sys.exit(1)
    
    if not verificar_configuracoes():
        sys.exit(1)
    
    print("\nüöÄ Iniciando o bot...")
    print("=" * 50)
    
    # Importa e executa o bot principal
    try:
        from main import bot, BOT_TOKEN
        if BOT_TOKEN:
            bot.run(BOT_TOKEN)
        else:
            print("‚ùå BOT_TOKEN n√£o encontrado")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã Bot encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar o bot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 