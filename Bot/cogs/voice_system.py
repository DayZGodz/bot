import discord
from discord.ext import commands
import os
import asyncio
import requests
import random
import subprocess
import glob
import hashlib
import shutil
import datetime
from dotenv import load_dotenv
import json

load_dotenv()

def get_env_id(key):
    value = os.getenv(key, "0")
    return int(value.strip('\'\"'))

# Configura√ß√µes do ElevenLabs
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
VOICE_ID = os.getenv("VOICE_ID")
AUDIO_CHANNEL_ID = get_env_id("AUDIO_CHANNEL_ID")
print(f"DEBUG: AUDIO_CHANNEL_ID lido do .env: {AUDIO_CHANNEL_ID} (tipo: {type(AUDIO_CHANNEL_ID)})")

def configurar_ffmpeg():
    """Configura o FFmpeg automaticamente"""
    # Primeiro verifica se FFmpeg j√° est√° no PATH
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True, timeout=5)
        return True
    except:
        pass
    
    # Procura pelo FFmpeg instalado pelo winget
    ffmpeg_paths = [
        # Caminho t√≠pico do winget
        os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Microsoft', 'WinGet', 'Packages', 'Gyan.FFmpeg.Essentials_*', 'ffmpeg-*', 'bin'),
        # Outros caminhos poss√≠veis
        'C:\\ffmpeg\\bin',
        'C:\\Program Files\\ffmpeg\\bin',
        'C:\\Program Files (x86)\\ffmpeg\\bin'
    ]
    
    for path_pattern in ffmpeg_paths:
        # Usa glob para encontrar caminhos com wildcards
        matching_paths = glob.glob(path_pattern)
        for path in matching_paths:
            ffmpeg_exe = os.path.join(path, 'ffmpeg.exe')
            if os.path.exists(ffmpeg_exe):
                # Adiciona ao PATH da sess√£o atual
                if path not in os.environ['PATH']:
                    os.environ['PATH'] += f';{path}'
                    print(f"üéµ FFmpeg configurado: {path}")
                    return True
    
    print("‚ö†Ô∏è FFmpeg n√£o encontrado - alguns recursos de √°udio podem n√£o funcionar")
    return False

# Configura FFmpeg automaticamente na inicializa√ß√£o
configurar_ffmpeg()

class VoiceSystem(commands.Cog):
    """Sistema de voz com clonagem e mensagens programadas"""
    
    def __init__(self, bot):
        self.bot = bot
        self.is_playing_cycle = False
        self.voice_client = None
        self.current_task = None
        self.mensagens_task = None
        self.pausar_musica_para_mensagem = False  # Nova flag para controlar m√∫sica vs mensagens
        self.tocando_mensagem = False  # Flag para indicar quando est√° falando
        self.primeira_mensagem = True  # Flag para sempre come√ßar com a primeira mensagem
        
        # Arquivo de m√∫sica de espera
        self.musica_espera = "jazz-lounge-elevator-music-332339.mp3"
        
        # Mensagens programadas para o sistema de telecomunica√ß√µes
        self.mensagens_sistema = [
            "Bem-vindo ao melhor servidor de DayZ. FavelaZ .",
            "Sua chamada √© importante para n√≥s. Aguarde enquanto conectamos voc√™ a um atendente.",
            "Para agilizar seu atendimento, tenha em m√£os o n√∫mero do seu protocolo.",
            "Nosso hor√°rio de funcionamento √© das nove √†s dezoito horas, de segunda a sexta-feira.",
            "Voc√™ pode abrir um ticket a qualquer momento digitando exclama√ß√£o ticket.",
            "Obrigado por escolher nossos servi√ßos. Aguarde na linha.",
            "Seu tempo de espera estimado √© de aproximadamente dois minutos.",
            "Para emerg√™ncias, entre em contato atrav√©s do nosso canal priorit√°rio."
        ]
    
    @commands.Cog.listener()
    async def on_ready(self):
        print("üéµ Sistema de Voz carregado com m√∫sica jazz")
        os.makedirs('temp_audio', exist_ok=True)
        os.makedirs('cached_voices', exist_ok=True)
        os.makedirs('backup_voices', exist_ok=True)
        print("üíæ Sistema de cache de voz ativado - economiza cr√©ditos ElevenLabs!")
        print("üîÑ Sistema de backup de vozes ativado!")
        # Auto-conex√£o ao canal de voz
        await self.auto_conectar_voz()
        # Auto-download de frases se necess√°rio
        await self.auto_download_frases()

    async def get_voice_channel(self, channel_id):
        """Busca um canal de voz pelo ID"""
        print(f"DEBUG: Tentando encontrar canal de voz {channel_id}")
        
        # Primeiro tenta pelo cache
        channel = self.bot.get_channel(channel_id)
        if channel and isinstance(channel, discord.VoiceChannel):
            print(f"DEBUG: Canal encontrado no cache: {channel.name}")
            return channel
            
        print(f"DEBUG: Canal n√£o encontrado no cache, tentando fetch_channel")
        
        # Se n√£o encontrar, tenta buscar pela API
        try:
            channel = await self.bot.fetch_channel(channel_id)
            if isinstance(channel, discord.VoiceChannel):
                print(f"DEBUG: Canal encontrado via fetch_channel: {channel.name}")
                return channel
        except discord.NotFound:
            print(f"DEBUG: Canal n√£o encontrado (404): {channel_id}")
        except Exception as e:
            print(f"DEBUG: Erro ao buscar canal: {e}")

        # Se ainda n√£o encontrou, tenta buscar em todas as guilds
        print("DEBUG: Tentando encontrar canal em todas as guilds")
        for guild in self.bot.guilds:
            # Primeiro procura pelo nome "üìû Central de Atendimento" na categoria admin
            for channel in guild.voice_channels:
                if channel.name == "üìû Central de Atendimento":
                    print(f"DEBUG: Canal encontrado pelo nome em {guild.name}: {channel.name} (ID: {channel.id})")
                    # Atualiza o .env com o ID correto
                    os.environ['AUDIO_CHANNEL_ID'] = str(channel.id)
                    return channel
            
            # Se n√£o encontrar pelo nome, tenta pelo ID
            for channel in guild.voice_channels:
                if channel.id == channel_id:
                    print(f"DEBUG: Canal encontrado pelo ID em {guild.name}: {channel.name}")
                    return channel
        
        print("DEBUG: Canal de √°udio n√£o encontrado")
        return None

    async def auto_conectar_voz(self):
        """Conecta automaticamente ao canal de voz se configurado"""
        print(f"DEBUG: Iniciando auto_conectar_voz")
        
        if self.is_playing_cycle:
            if self.voice_client and self.voice_client.is_connected():
                print("DEBUG: Sistema j√° est√° ativo e conectado")
                return True
            self.is_playing_cycle = False
            
        # Recarrega o AUDIO_CHANNEL_ID do .env
        load_dotenv()
        channel_id = int(os.getenv('AUDIO_CHANNEL_ID', '0'))
        print(f"DEBUG: AUDIO_CHANNEL_ID = {channel_id}")
        
        # Tenta reconectar at√© 3 vezes
        for tentativa in range(3):
            print(f"DEBUG: Tentativa {tentativa + 1} de conectar")
            audio_channel = await self.get_voice_channel(channel_id)
            
            if not audio_channel:
                print("DEBUG: Canal de √°udio n√£o encontrado")
                await asyncio.sleep(2)  # Aguarda um pouco antes da pr√≥xima tentativa
                continue
                
            try:
                # Se j√° estiver conectado em outro canal, desconecta
                if self.voice_client:
                    if self.voice_client.is_connected():
                        if self.voice_client.channel.id == audio_channel.id:
                            print("DEBUG: J√° conectado ao canal correto")
                            return True
                        await self.voice_client.disconnect()
                    
                # Conecta ao canal
                self.voice_client = await audio_channel.connect()
                print(f"DEBUG: Conectado ao canal: {audio_channel.name}")
                
                # Inicia a m√∫sica
                await self.tocar_musica_espera()
                print("DEBUG: M√∫sica iniciada com sucesso")
                
                # Inicia o ciclo de mensagens
                self.is_playing_cycle = True
                self.mensagens_task = asyncio.create_task(self.sistema_mensagens_automaticas())
                print("DEBUG: Ciclo de mensagens iniciado")
                
                return True
                
            except Exception as e:
                print(f"DEBUG: Erro ao conectar: {e}")
                if self.voice_client:
                    try:
                        await self.voice_client.disconnect()
                    except:
                        pass
                await asyncio.sleep(2)  # Aguarda antes da pr√≥xima tentativa
        
        print("DEBUG: Todas as tentativas de conex√£o falharam")
        return False

    async def setup_servidor_voice(self, ctx):
        """Configura o sistema de voz ap√≥s setup_servidor"""
        print("DEBUG: Iniciando setup_servidor_voice")
        
        # Tenta conectar ao canal de voz
        sucesso = await self.auto_conectar_voz()
        
        if sucesso:
            await ctx.send("‚úÖ Sistema de voz conectado e funcionando!")
        else:
            await ctx.send("‚ùå Falha ao conectar ao sistema de voz. Por favor, use !iniciar_sistema para tentar novamente.")

    async def auto_download_frases(self):
        """Verifica e baixa frases se necess√°rio ao iniciar"""
        # Verifica se todos os arquivos de voz existem no cache
        frases = self.mensagens_sistema
        faltando = []
        for i, frase in enumerate(frases):
            hash_nome = self.gerar_hash_mensagem(frase)
            arquivo = f"voice_{hash_nome}.mp3"
            if not os.path.exists(os.path.join('cached_voices', arquivo)):
                faltando.append(frase)
        if faltando:
            if VOICE_ID:
                print(f"üîÑ Baixando {len(faltando)} frases de voz que faltam no cache...")
                await self.gerar_todas_frases_nova_voz(VOICE_ID)
            else:
                print("‚ö†Ô∏è VOICE_ID n√£o configurado. N√£o √© poss√≠vel baixar frases de voz.")
        else:
            print("‚úÖ Todas as frases de voz j√° est√£o no cache.")

    def criar_backup_voz_atual(self, nova_voice_id: str):
        """Cria backup das vozes atuais antes de trocar"""
        try:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            current_voice_id = VOICE_ID or "unknown"
            
            # Cria pasta de backup com timestamp
            backup_dir = f"backup_voices/backup_{current_voice_id}_{timestamp}"
            os.makedirs(backup_dir, exist_ok=True)
            
            # Copia todos os arquivos de voz atuais para o backup
            arquivos_copiados = 0
            if os.path.exists('cached_voices'):
                for arquivo in os.listdir('cached_voices'):
                    if arquivo.endswith('.mp3'):
                        src = os.path.join('cached_voices', arquivo)
                        dst = os.path.join(backup_dir, arquivo)
                        shutil.copy2(src, dst)
                        arquivos_copiados += 1
            
            # Salva informa√ß√µes do backup
            info_backup = f"""BACKUP DE VOZ ANTERIOR
Data: {datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
Voice ID Anterior: {current_voice_id}
Nova Voice ID: {nova_voice_id}
Total de Arquivos: {arquivos_copiados}
Mensagens Salvas: {len(self.mensagens_sistema)}
"""
            
            with open(os.path.join(backup_dir, "info_backup.txt"), "w", encoding="utf-8") as f:
                f.write(info_backup)
            
            print(f"üíæ Backup criado: {backup_dir} ({arquivos_copiados} arquivos)")
            return backup_dir
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao criar backup: {e}")
            return None

    async def gerar_todas_frases_nova_voz(self, nova_voice_id: str, ctx=None):
        """Gera todas as frases com a nova voz"""
        try:
            if ctx:
                embed_inicial = discord.Embed(
                    title="üé§ Iniciando Download",
                    description="Iniciando download de todas as frases com a nova voz...",
                    color=discord.Color.blue()
                )
                message = await ctx.send(embed=embed_inicial)
            
            sucessos = 0
            erros = 0
            
            # Limpa cache atual (ser√° recriado com nova voz)
            if os.path.exists('cached_voices'):
                for arquivo in os.listdir('cached_voices'):
                    if arquivo.endswith('.mp3'):
                        os.remove(os.path.join('cached_voices', arquivo))
            
            # Gera cada mensagem com a nova voz
            for i, mensagem in enumerate(self.mensagens_sistema, 1):
                try:
                    if ctx and 'message' in locals():
                        embed = discord.Embed(
                            title="üé§ Gerando Nova Voz",
                            description=f"Processando mensagem {i}/{len(self.mensagens_sistema)}...\n\n**Texto:** {mensagem[:100]}...",
                            color=discord.Color.blue()
                        )
                        await message.edit(embed=embed)
                    
                    # Gera √°udio com nova voz
                    arquivo_gerado = await self.gerar_audio_elevenlabs_com_voice_id(mensagem, nova_voice_id)
                    if arquivo_gerado:
                        sucessos += 1
                        print(f"‚úÖ Mensagem {i} gerada: {mensagem[:50]}...")
                    else:
                        erros += 1
                        print(f"‚ùå Erro na mensagem {i}: {mensagem[:50]}...")
                    
                    # Pausa para n√£o sobrecarregar a API
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    erros += 1
                    print(f"‚ùå Erro ao gerar mensagem {i}: {e}")
            
            resultado = f"‚úÖ Download conclu√≠do!\n\n**Sucessos:** {sucessos}\n**Erros:** {erros}\n**Total:** {len(self.mensagens_sistema)}"
            
            if ctx and 'message' in locals():
                embed = discord.Embed(
                    title="üéâ Download Conclu√≠do!",
                    description=resultado,
                    color=discord.Color.green()
                )
                embed.set_footer(text="Nova voz configurada e cache atualizado!")
                await message.edit(embed=embed)
            
            print(f"üéâ {resultado}")
            return sucessos, erros
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no download das frases: {e}")
            return 0, len(self.mensagens_sistema)

    async def gerar_audio_elevenlabs_com_voice_id(self, texto, voice_id):
        """Gera √°udio usando ElevenLabs com voice_id espec√≠fico"""
        if not ELEVENLABS_API_KEY or ELEVENLABS_API_KEY.strip() == "":
            print("‚ö†Ô∏è ElevenLabs n√£o configurado")
            return None
        
        try:
            # Verifica se j√° existe no cache
            hash_texto = self.gerar_hash_mensagem(texto)
            arquivo_cache = f"cached_voices/voice_{hash_texto}.mp3"
            
            print(f"üåê Gerando √°udio com voice_id {voice_id}: {texto[:50]}...")
            
            # Configura√ß√£o da API ElevenLabs
            url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
            
            headers = {
                "Accept": "audio/mpeg",
                "Content-Type": "application/json",
                "xi-api-key": ELEVENLABS_API_KEY
            }
            
            data = {
                "text": texto,
                "model_id": "eleven_multilingual_v2",
                "voice_settings": {
                    "stability": 0.75,
                    "similarity_boost": 0.85,
                    "style": 0.25
                }
            }
            
            response = requests.post(url, json=data, headers=headers, timeout=30)
            
            if response.status_code == 200:
                # Salva o arquivo de √°udio
                with open(arquivo_cache, 'wb') as f:
                    f.write(response.content)
                
                print(f"üíæ √Åudio salvo: {arquivo_cache}")
                return arquivo_cache
            else:
                print(f"‚ùå Erro na API ElevenLabs: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar √°udio: {e}")
            return None

    @commands.command(name='trocar_voz', aliases=['nova_voz', 'mudar_voz'])
    @commands.has_permissions(administrator=True)
    async def trocar_voz_completa(self, ctx, nova_voice_id: str):
        """Troca a voz do sistema criando backup e baixando todas as frases"""
        
        # Valida√ß√£o b√°sica do voice_id
        if len(nova_voice_id) < 10:
            await ctx.send("‚ùå Voice ID inv√°lido. Deve ter pelo menos 10 caracteres.")
            return
        
        embed_inicial = discord.Embed(
            title="üîÑ Iniciando Troca de Voz",
            description="Criando backup da voz atual e preparando nova voz...",
            color=discord.Color.orange()
        )
        message = await ctx.send(embed=embed_inicial)
        
        try:
            # 1. Criar backup da voz atual
            print(f"üíæ Criando backup da voz atual...")
            backup_dir = self.criar_backup_voz_atual(nova_voice_id)
            
            embed_backup = discord.Embed(
                title="üíæ Backup Criado",
                description=f"Voz anterior salva em: `{backup_dir}`\n\nIniciando download com nova voz...",
                color=discord.Color.blue()
            )
            await message.edit(embed=embed_backup)
            
            # 2. Atualizar VOICE_ID no ambiente (temporariamente)
            global VOICE_ID
            old_voice_id = VOICE_ID
            VOICE_ID = nova_voice_id
            
            # 3. Gerar todas as frases com nova voz
            sucessos, erros = await self.gerar_todas_frases_nova_voz(nova_voice_id, message)
            
            # 4. Embed de sucesso final
            embed_final = discord.Embed(
                title="üéâ Troca de Voz Conclu√≠da!",
                color=discord.Color.green()
            )
            
            embed_final.add_field(
                name="üìä Resultados",
                value=f"**Sucessos:** {sucessos}\n**Erros:** {erros}\n**Total:** {len(self.mensagens_sistema)}",
                inline=True
            )
            
            old_voice_display = f"{old_voice_id[:20]}..." if old_voice_id and len(old_voice_id) > 20 else old_voice_id if old_voice_id else 'N/A'
            new_voice_display = f"{nova_voice_id[:20]}..." if nova_voice_id and len(nova_voice_id) > 20 else nova_voice_id
            embed_final.add_field(
                name="üîÑ Configura√ß√£o",
                value=f"**Voz Anterior:** `{old_voice_display}`\n**Nova Voz:** `{new_voice_display}`",
                inline=True
            )
            
            embed_final.add_field(
                name="üíæ Backup",
                value=f"Arquivos anteriores salvos em:\n`{backup_dir}`",
                inline=False
            )
            
            embed_final.add_field(
                name="‚öôÔ∏è Pr√≥ximo Passo",
                value="**IMPORTANTE:** Atualize o arquivo `.env` com a nova VOICE_ID para que a mudan√ßa seja permanente!",
                inline=False
            )
            
            embed_final.set_footer(text="Sistema de voz atualizado com sucesso!")
            
            await message.edit(embed=embed_final)
            
            print(f"üéâ Troca de voz conclu√≠da: {old_voice_id} ‚Üí {nova_voice_id}")
            
        except Exception as e:
            # Restaura voice_id original em caso de erro
            VOICE_ID = old_voice_id
            
            embed_erro = discord.Embed(
                title="‚ùå Erro na Troca de Voz",
                description=f"Erro: {str(e)}\n\nVoz original restaurada.",
                color=discord.Color.red()
            )
            await message.edit(embed=embed_erro)
            print(f"‚ùå Erro na troca de voz: {e}")

    @commands.command(name='restaurar_backup', aliases=['restore_voice'])
    @commands.has_permissions(administrator=True)
    async def restaurar_backup_voz(self, ctx):
        """Lista e permite restaurar backups de voz"""
        
        try:
            # Lista backups dispon√≠veis
            backups_disponiveis = []
            if os.path.exists('backup_voices'):
                for pasta in os.listdir('backup_voices'):
                    if pasta.startswith('backup_'):
                        info_path = os.path.join('backup_voices', pasta, 'info_backup.txt')
                        if os.path.exists(info_path):
                            backups_disponiveis.append(pasta)
            
            if not backups_disponiveis:
                await ctx.send("‚ùå Nenhum backup de voz encontrado.")
                return
            
            # Cria embed com lista de backups
            embed = discord.Embed(
                title="üíæ Backups Dispon√≠veis",
                description="Backups de vozes encontrados:",
                color=discord.Color.blue()
            )
            
            for i, backup in enumerate(backups_disponiveis[:10], 1):  # M√°ximo 10
                # L√™ informa√ß√µes do backup
                info_path = os.path.join('backup_voices', backup, 'info_backup.txt')
                try:
                    with open(info_path, 'r', encoding='utf-8') as f:
                        info = f.read()
                    
                    # Extrai data do backup
                    if 'Data:' in info:
                        data_linha = [linha for linha in info.split('\n') if 'Data:' in linha][0]
                        data = data_linha.split('Data: ')[1]
                    else:
                        data = "Data n√£o dispon√≠vel"
                    
                    embed.add_field(
                        name=f"{i}. {backup}",
                        value=f"üìÖ {data}",
                        inline=False
                    )
                    
                except:
                    embed.add_field(
                        name=f"{i}. {backup}",
                        value="üìÖ Informa√ß√µes n√£o dispon√≠veis",
                        inline=False
                    )
            
            embed.set_footer(text="Use !restaurar_backup <n√∫mero> para restaurar")
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(f"‚ùå Erro ao listar backups: {e}")

    @commands.command(name='info_backup')
    @commands.has_permissions(administrator=True)
    async def info_backup_voz(self, ctx):
        """Mostra informa√ß√µes sobre o sistema de backup"""
        
        try:
            # Conta backups
            total_backups = 0
            total_arquivos = 0
            
            if os.path.exists('backup_voices'):
                for pasta in os.listdir('backup_voices'):
                    if pasta.startswith('backup_'):
                        total_backups += 1
                        backup_path = os.path.join('backup_voices', pasta)
                        total_arquivos += len([f for f in os.listdir(backup_path) if f.endswith('.mp3')])
            
            # Conta cache atual
            cache_atual = len([f for f in os.listdir('cached_voices') if f.endswith('.mp3')]) if os.path.exists('cached_voices') else 0
            
            embed = discord.Embed(
                title="üìä Sistema de Backup de Vozes",
                color=discord.Color.green()
            )
            
            embed.add_field(
                name="üíæ Backups",
                value=f"**Total:** {total_backups}\n**Arquivos:** {total_arquivos}",
                inline=True
            )
            
            embed.add_field(
                name="üéµ Cache Atual",
                value=f"**Arquivos:** {cache_atual}\n**Mensagens:** {len(self.mensagens_sistema)}",
                inline=True
            )
            
            embed.add_field(
                name="üîß Comandos",
                value="‚Ä¢ `!trocar_voz <voice_id>` - Troca voz com backup\n‚Ä¢ `!restaurar_backup` - Lista backups\n‚Ä¢ `!info_backup` - Mostra esta info",
                inline=False
            )
            
            embed.set_footer(text="Sistema autom√°tico de backup e restaura√ß√£o")
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(f"‚ùå Erro ao obter informa√ß√µes: {e}")

    async def tocar_musica_espera(self):
        """Toca a m√∫sica de espera em loop no Discord"""
        if not os.path.exists(self.musica_espera):
            print(f"‚ö†Ô∏è M√∫sica de espera n√£o encontrada: {self.musica_espera}")
            return False
        
        if not self.voice_client:
            print("‚ö†Ô∏è Bot n√£o est√° conectado a um canal de voz")
            return False
            
        try:
            # Para qualquer √°udio atual
            if self.voice_client.is_playing():
                self.voice_client.stop()
            
            # Aguarda um pouco para garantir que parou
            await asyncio.sleep(0.5)
            
            # Op√ß√µes mais compat√≠veis para o FFmpeg com fade e volume baixo
            ffmpeg_options = {
                'before_options': '-re',  # L√™ em tempo real
                'options': '-vn -filter:a "volume=0.2,afade=t=in:d=2,afade=t=out:st=60:d=3"'  # Volume muito baixo + fade in/out
            }
            
            # Cria fonte de √°udio para Discord
            source = discord.FFmpegPCMAudio(
                self.musica_espera,
                **ffmpeg_options
            )
            
            # Fun√ß√£o para fazer loop da m√∫sica (s√≥ se n√£o estiver pausada para mensagem)
            def loop_music(error):
                if error:
                    print(f'‚ö†Ô∏è Erro na reprodu√ß√£o: {error}')
                else:
                    # S√≥ reinicia se n√£o estiver pausada para mensagem e o sistema estiver ativo
                    if (not self.pausar_musica_para_mensagem and 
                        not self.tocando_mensagem and 
                        self.is_playing_cycle and 
                        self.voice_client and 
                        not self.voice_client.is_playing()):
                        try:
                            new_source = discord.FFmpegPCMAudio(self.musica_espera, **ffmpeg_options)
                            self.voice_client.play(new_source, after=loop_music)
                            print('üîÑ M√∫sica jazz reiniciada automaticamente')
                        except Exception as e:
                            print(f'‚ö†Ô∏è Erro ao reiniciar m√∫sica: {e}')
            
            # Reproduz no canal de voz do Discord
            self.voice_client.play(source, after=loop_music)
            print(f"üéµ M√∫sica jazz iniciada no Discord: {self.musica_espera}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao tocar m√∫sica no Discord: {e}")
            return False

    async def fade_out_musica(self):
        """Diminui a m√∫sica gradualmente (fade out suave)"""
        try:
            self.pausar_musica_para_mensagem = True
            if self.voice_client and self.voice_client.is_playing():
                print("üîâ Iniciando fade out da m√∫sica...")
                
                # Para a m√∫sica atual (que estava em volume normal)
                self.voice_client.stop()
                await asyncio.sleep(0.3)
                
                # Toca a m√∫sica com fade out de 3 segundos
                if os.path.exists(self.musica_espera):
                    ffmpeg_fade_out = {
                        'before_options': '-re',
                        'options': '-vn -filter:a "volume=0.2,afade=t=out:d=3"'  # Fade out de 3 segundos
                    }
                    source = discord.FFmpegPCMAudio(self.musica_espera, **ffmpeg_fade_out)
                    self.voice_client.play(source)
                    print("üîâ M√∫sica fazendo fade out...")
                    
                    # Aguarda o fade out completar
                    await asyncio.sleep(3.5)
                    
                    # Para completamente
                    if self.voice_client.is_playing():
                        self.voice_client.stop()
                    
                    print("üîá Fade out conclu√≠do - m√∫sica silenciada")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no fade out da m√∫sica: {e}")
    
    async def parar_musica_temporariamente(self):
        """Para a m√∫sica temporariamente para tocar mensagens (com fade)"""
        await self.fade_out_musica()

    async def fade_in_musica(self):
        """Retoma a m√∫sica com fade in gradual"""
        try:
            self.pausar_musica_para_mensagem = False
            if self.is_playing_cycle and self.voice_client:
                print("üîä Iniciando fade in da m√∫sica...")
                
                # M√∫sica com fade in de 4 segundos
                ffmpeg_fade_in = {
                    'before_options': '-re',
                    'options': '-vn -filter:a "volume=0.2,afade=t=in:d=4"'  # Fade in longo e suave
                }
                
                source = discord.FFmpegPCMAudio(self.musica_espera, **ffmpeg_fade_in)
                
                # Fun√ß√£o para loop ap√≥s fade in
                def loop_after_fadein(error):
                    if error:
                        print(f'‚ö†Ô∏è Erro no fade in: {error}')
                    else:
                        # Ap√≥s fade in, volta ao loop normal
                        if (not self.pausar_musica_para_mensagem and 
                            not self.tocando_mensagem and 
                            self.is_playing_cycle and 
                            self.voice_client and 
                            not self.voice_client.is_playing()):
                            asyncio.create_task(self.tocar_musica_espera())
                
                self.voice_client.play(source, after=loop_after_fadein)
                print("üéµ M√∫sica jazz retomada com fade in suave")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no fade in da m√∫sica: {e}")
    
    async def retomar_musica(self):
        """Retoma a m√∫sica ap√≥s tocar mensagem com fade in"""
        try:
            await asyncio.sleep(1.5)  # Pausa menor para transi√ß√£o suave
            await self.fade_in_musica()
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao retomar m√∫sica: {e}")

    async def parar_musica_espera(self):
        """Para a m√∫sica de espera no Discord (para comandos manuais)"""
        try:
            self.pausar_musica_para_mensagem = True
            if self.voice_client and self.voice_client.is_playing():
                self.voice_client.stop()
                print("üîá M√∫sica jazz parada no Discord")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao parar m√∫sica: {e}")

    def gerar_hash_mensagem(self, texto):
        """Gera hash √∫nico para uma mensagem"""
        return hashlib.md5(texto.encode('utf-8')).hexdigest()
    
    async def gerar_audio_elevenlabs(self, texto):
        """Gera √°udio usando a API do ElevenLabs com sistema de cache"""
        if not ELEVENLABS_API_KEY or not VOICE_ID or ELEVENLABS_API_KEY.strip() == "":
            print("‚ö†Ô∏è ElevenLabs n√£o configurado - usando modo texto")
            return None
        
        # Verifica se j√° existe no cache
        hash_texto = self.gerar_hash_mensagem(texto)
        arquivo_cache = f"cached_voices/voice_{hash_texto}.mp3"
        
        if os.path.exists(arquivo_cache):
            print(f"üíæ Usando √°udio do cache: {texto[:50]}...")
            return arquivo_cache
            
        print(f"üåê Gerando novo √°udio via ElevenLabs: {texto[:50]}...")
        # Garante que os diret√≥rios existem
        os.makedirs('temp_audio', exist_ok=True)
        os.makedirs('cached_voices', exist_ok=True)
            
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": ELEVENLABS_API_KEY
        }
        
        data = {
            "text": texto,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.75,
                "similarity_boost": 0.75,
                "style": 0.5,
                "use_speaker_boost": True
            }
        }
        
        try:
            response = requests.post(url, json=data, headers=headers, timeout=30)
            
            if response.status_code == 200:
                # Salva no cache permanente
                with open(arquivo_cache, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=1024):
                        if chunk:
                            f.write(chunk)
                print(f"üíæ √Åudio salvo no cache: {arquivo_cache}")
                return arquivo_cache
            else:
                print(f"‚ùå Erro na API ElevenLabs: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar √°udio: {e}")
            return None

    @commands.command(name='iniciar_sistema', aliases=['start_voice', 'iniciar_voz'])
    @commands.has_permissions(manage_channels=True)
    async def iniciar_sistema_voz(self, ctx):
        """Inicia o sistema de voz automatizado no canal configurado"""
        if self.is_playing_cycle:
            if self.voice_client and self.voice_client.is_connected():
                return await ctx.send("‚ùå O sistema de voz j√° est√° ativo!")
            self.is_playing_cycle = False
        audio_channel = await self.get_voice_channel(AUDIO_CHANNEL_ID)
        if not audio_channel:
            return await ctx.send("‚ùå Canal de √°udio n√£o configurado ou n√£o encontrado. Verifique o arquivo .env e se o canal existe.")
        if not isinstance(audio_channel, discord.VoiceChannel):
            return await ctx.send("‚ùå O canal configurado n√£o √© um canal de voz.")
        try:
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.disconnect(force=True)
            embed_loading = discord.Embed(
                title="üîÑ Conectando ao Canal",
                description=f"Conectando ao canal {audio_channel.mention}...",
                color=discord.Color.yellow()
            )
            message = await ctx.send(embed=embed_loading)
            self.voice_client = await audio_channel.connect()
            embed = discord.Embed(
                title="üéµ Sistema de Voz Ativado",
                description=f"Bot conectado ao canal {audio_channel.mention}",
                color=discord.Color.green()
            )
            embed.add_field(
                name="üìû Funcionalidades Ativas",
                value="‚Ä¢ ‚úÖ Conectado ao canal de voz\n‚Ä¢ ‚úÖ Clonagem de voz (ElevenLabs)\n‚Ä¢ ‚úÖ Sistema de m√∫sica jazz\n‚Ä¢ ‚úÖ FFmpeg instalado",
                inline=False
            )
            embed.add_field(
                name="üé∑ Comandos Dispon√≠veis",
                value="`!falar_com_musica [texto]` - Falar com jazz\n`!controlar_jazz [play/stop]` - Controlar m√∫sica",
                inline=False
            )
            await message.edit(embed=embed)
            self.is_playing_cycle = True
            self.primeira_mensagem = True
            sucesso_musica = await self.tocar_musica_espera()
            if sucesso_musica:
                embed.add_field(
                    name="üéµ M√∫sica Jazz",
                    value="‚úÖ Tocando automaticamente",
                    inline=False
                )
            if not self.mensagens_task:
                self.mensagens_task = asyncio.create_task(self.sistema_mensagens_automaticas())
                embed.add_field(
                    name="üì¢ Mensagens Autom√°ticas",
                    value="‚úÖ Sistema de telecomunica√ß√µes ativo",
                    inline=False
                )
            await message.edit(embed=embed)
        except Exception as e:
            embed_error = discord.Embed(
                title="‚ùå Erro ao Conectar",
                description=f"N√£o foi poss√≠vel conectar ao canal: {e}",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed_error)

    @commands.command(name='parar_sistema', aliases=['stop_voice', 'parar_voz'])
    @commands.has_permissions(manage_channels=True)
    async def parar_sistema_voz(self, ctx):
        """Para o sistema de voz"""
        if not self.is_playing_cycle:
            return await ctx.send("‚ùå O sistema de voz n√£o est√° ativo.")
            
        self.is_playing_cycle = False
        
        # Para as mensagens autom√°ticas
        if self.mensagens_task:
            self.mensagens_task.cancel()
            self.mensagens_task = None
        
        if self.voice_client:
            try:
                await self.voice_client.disconnect()
            except:
                pass
            self.voice_client = None
            
        embed = discord.Embed(
            title="üîá Sistema de Telecomunica√ß√µes Desativado",
            description="Sistema completo parado: m√∫sica, mensagens e conex√£o de voz.",
            color=discord.Color.red()
        )
        embed.add_field(
            name="üéµ M√∫sica",
            value="‚ùå Parada",
            inline=True
        )
        embed.add_field(
            name="üì¢ Mensagens",
            value="‚ùå Paradas",
            inline=True
        )
        embed.add_field(
            name="üîó Conex√£o",
            value="‚ùå Desconectado",
            inline=True
        )
        await ctx.send(embed=embed)

    @commands.command(name='falar', aliases=['speak', 'voice_say'])
    @commands.has_permissions(manage_messages=True)
    async def falar_texto(self, ctx, *, texto: str):
        """Faz o bot processar um texto usando clonagem de voz"""
        if len(texto) > 500:
            return await ctx.send("‚ùå O texto √© muito longo (m√°ximo 500 caracteres).")
        
        embed_loading = discord.Embed(
            title="üé§ Processando Texto",
            description="Processando texto com IA...",
            color=discord.Color.yellow()
        )
        message = await ctx.send(embed=embed_loading)
        
        try:
            # Verifica se ElevenLabs est√° configurado
            if ELEVENLABS_API_KEY and VOICE_ID and ELEVENLABS_API_KEY.strip() != "":
                # Gera o √°udio
                arquivo_audio = await self.gerar_audio_elevenlabs(texto)
                
                if arquivo_audio:
                    embed_success = discord.Embed(
                        title="‚úÖ √Åudio Gerado",
                        description=f"**Texto:** {texto}\n**Arquivo:** `{arquivo_audio}`",
                        color=discord.Color.green()
                    )
                    embed_success.add_field(
                        name="‚ÑπÔ∏è Nota",
                        value="Arquivo de √°udio criado. Para reproduzir, instale FFmpeg.",
                        inline=False
                    )
                else:
                    embed_success = discord.Embed(
                        title="üìù Modo Texto",
                        description=f"**Texto processado:** {texto}",
                        color=discord.Color.blue()
                    )
            else:
                embed_success = discord.Embed(
                    title="üìù Modo Texto",
                    description=f"**Texto processado:** {texto}",
                    color=discord.Color.blue()
                )
                embed_success.add_field(
                    name="‚ÑπÔ∏è Para ativar voz",
                    value="Configure ElevenLabs API no arquivo .env",
                    inline=False
                )
                
            await message.edit(embed=embed_success)
                
        except Exception as e:
            embed_error = discord.Embed(
                title="‚ùå Erro",
                description=f"Ocorreu um erro: {e}",
                color=discord.Color.red()
            )
            await message.edit(embed=embed_error)

    @commands.command(name='status_voz', aliases=['voice_status'])
    async def status_sistema_voz(self, ctx):
        """Mostra o status do sistema de voz"""
        embed = discord.Embed(
            title="üìä Status do Sistema de Voz",
            color=discord.Color.blue()
        )
        
        # Status do sistema
        if self.is_playing_cycle:
            embed.add_field(
                name="üü¢ Status",
                value="Sistema ativo",
                inline=True
            )
        else:
            embed.add_field(
                name="üî¥ Status",
                value="Sistema inativo",
                inline=True
            )
        
        # Configura√ß√µes da API
        api_status = "‚úÖ Configurada" if ELEVENLABS_API_KEY and VOICE_ID else "‚ùå N√£o configurada"
        embed.add_field(
            name="üîß API ElevenLabs",
            value=api_status,
            inline=True
        )
        
        embed.add_field(
            name="üìû Mensagens Dispon√≠veis",
            value=f"{len(self.mensagens_sistema)} mensagens programadas",
            inline=True
        )
        
        # Status do FFmpeg
        try:
            # Teste simples para verificar FFmpeg
            import subprocess
            subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
            ffmpeg_status = "‚úÖ Instalado"
        except:
            ffmpeg_status = "‚ùå N√£o instalado"
            
        embed.add_field(
            name="üéµ FFmpeg",
            value=ffmpeg_status,
            inline=True
        )
        
        embed.add_field(
            name="üí° Dica",
            value="Para √°udio completo, instale FFmpeg e configure ElevenLabs",
            inline=False
        )
        
        await ctx.send(embed=embed)

    @commands.command(name='add_mensagem', aliases=['adicionar_mensagem'])
    @commands.has_permissions(administrator=True)
    async def adicionar_mensagem(self, ctx, *, mensagem: str):
        """Adiciona uma nova mensagem ao sistema (Admin apenas)"""
        if len(mensagem) > 200:
            return await ctx.send("‚ùå A mensagem √© muito longa (m√°ximo 200 caracteres).")
            
        self.mensagens_sistema.append(mensagem)
        
        embed = discord.Embed(
            title="‚úÖ Mensagem Adicionada",
            description=f"Nova mensagem adicionada ao sistema:\n\n*{mensagem}*",
            color=discord.Color.green()
        )
        embed.set_footer(text=f"Total de mensagens: {len(self.mensagens_sistema)}")
        await ctx.send(embed=embed)

    @commands.command(name='falar_com_musica', aliases=['speak_music', 'falar_jazz'])
    @commands.has_permissions(manage_messages=True)
    async def falar_com_musica(self, ctx, *, texto: str):
        """Reproduz uma mensagem com clonagem de voz e m√∫sica de espera jazz"""
        if len(texto) > 500:
            return await ctx.send("‚ùå O texto √© muito longo (m√°ximo 500 caracteres).")
        
        embed_loading = discord.Embed(
            title="üéµ Processando com M√∫sica Jazz",
            description="Iniciando m√∫sica de espera e processando texto...",
            color=discord.Color.yellow()
        )
        message = await ctx.send(embed=embed_loading)
        
        try:
            # Inicia a m√∫sica de espera
            musica_tocando = await self.tocar_musica_espera()
            
            if musica_tocando:
                embed_loading.description = "üé∑ M√∫sica jazz tocando... Gerando √°udio com ElevenLabs..."
                await message.edit(embed=embed_loading)
                
                # Aguarda um pouco para a m√∫sica tocar
                await asyncio.sleep(2)
            
            # Verifica se ElevenLabs est√° configurado
            if ELEVENLABS_API_KEY and VOICE_ID and ELEVENLABS_API_KEY.strip() != "":
                # Para a m√∫sica temporariamente para a fala
                if musica_tocando:
                    await self.parar_musica_temporariamente()
                    await asyncio.sleep(1)  # Aguarda parar completamente
                    
                # Gera o √°udio da fala
                arquivo_audio = await self.gerar_audio_elevenlabs(texto)
                
                # Reproduz o √°udio da fala no Discord
                if arquivo_audio and self.voice_client:
                    try:
                        # Op√ß√µes de fade para a fala
                        ffmpeg_options_voice = {
                            'before_options': '-re',
                            'options': '-vn -filter:a "volume=0.9,afade=t=in:d=0.8,afade=t=out:st=4:d=1.2"'
                        }
                        source = discord.FFmpegPCMAudio(arquivo_audio, **ffmpeg_options_voice)
                        self.voice_client.play(source)
                        
                        # Aguarda a fala terminar
                        while self.voice_client.is_playing():
                            await asyncio.sleep(0.5)
                    except Exception as e:
                        print(f"Erro ao reproduzir fala: {e}")
                    
                # Volta a m√∫sica de espera
                if musica_tocando:
                    await asyncio.sleep(1)  # Pausa antes de voltar m√∫sica
                    await self.tocar_musica_espera()
                
                embed_success = discord.Embed(
                    title="üéµ‚úÖ Sistema Jazz Completo",
                    description=f"**Mensagem reproduzida:** {texto}",
                    color=discord.Color.green()
                )
                embed_success.add_field(
                    name="üé∑ Jazz",
                    value="M√∫sica de espera tocando",
                    inline=True
                )
                embed_success.add_field(
                    name="üé§ Voz",
                    value="ElevenLabs processou",
                    inline=True
                )
            else:
                embed_success = discord.Embed(
                    title="üé∑ Modo Jazz + Texto",
                    description=f"**Mensagem:** {texto}",
                    color=discord.Color.blue()
                )
                embed_success.add_field(
                    name="‚ÑπÔ∏è Para voz completa",
                    value="Configure ElevenLabs API no .env",
                    inline=False
                )
                
            await message.edit(embed=embed_success)
                
        except Exception as e:
            await self.parar_musica_temporariamente()
            embed_error = discord.Embed(
                title="‚ùå Erro",
                description=f"Ocorreu um erro: {e}",
                color=discord.Color.red()
            )
            await message.edit(embed=embed_error)

    @commands.command(name='controlar_jazz', aliases=['jazz_control', 'musica'])
    @commands.has_permissions(manage_messages=True)
    async def controlar_jazz(self, ctx, acao: str = None):
        """Controla a m√∫sica jazz de espera (play/stop/status)"""
        if not acao:
            embed = discord.Embed(
                title="üé∑ Controle da M√∫sica Jazz",
                description="Use: `!controlar_jazz [play/stop/status]`",
                color=discord.Color.blue()
            )
            embed.add_field(
                name="üéµ Comandos",
                value="‚Ä¢ `play` - Inicia a m√∫sica\n‚Ä¢ `stop` - Para a m√∫sica\n‚Ä¢ `status` - Mostra status",
                inline=False
            )
            return await ctx.send(embed=embed)
        
        acao = acao.lower()
        
        if acao in ['play', 'tocar', 'iniciar']:
            sucesso = await self.tocar_musica_espera()
            if sucesso:
                embed = discord.Embed(
                    title="üé∑ M√∫sica Jazz Iniciada",
                    description="Jazz lounge tocando em loop!",
                    color=discord.Color.green()
                )
            else:
                embed = discord.Embed(
                    title="‚ùå Erro",
                    description="N√£o foi poss√≠vel iniciar a m√∫sica. Verifique se pygame est√° instalado.",
                    color=discord.Color.red()
                )
            await ctx.send(embed=embed)
            
        elif acao in ['stop', 'parar', 'pauser']:
            await self.parar_musica_temporariamente()
            embed = discord.Embed(
                title="üîá M√∫sica Jazz Parada",
                description="M√∫sica de espera pausada.",
                color=discord.Color.orange()
            )
            await ctx.send(embed=embed)
            
        elif acao in ['status', 'info']:
            if self.voice_client and self.voice_client.is_connected():
                if self.voice_client.is_playing():
                    status = "üéµ Tocando no Discord"
                elif self.voice_client.is_paused():
                    status = "‚è∏Ô∏è Pausada"
                else:
                    status = "üîá Conectado mas n√£o tocando"
            else:
                status = "‚ùå Bot n√£o conectado ao canal"
                
            # Verifica FFmpeg
            try:
                subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True, timeout=3)
                ffmpeg_status = "‚úÖ Dispon√≠vel"
            except:
                ffmpeg_status = "‚ùå N√£o encontrado"
                
            embed = discord.Embed(
                title="üìä Status da M√∫sica Jazz",
                color=discord.Color.blue()
            )
            embed.add_field(name="üéµ Status", value=status, inline=True)
            embed.add_field(name="üìÅ Arquivo", value=self.musica_espera, inline=True)
            embed.add_field(name="üìÇ Existe", value="‚úÖ" if os.path.exists(self.musica_espera) else "‚ùå", inline=True)
            embed.add_field(name="üîß FFmpeg", value=ffmpeg_status, inline=True)
            embed.add_field(name="üîó Canal", value=f"<#{AUDIO_CHANNEL_ID}>" if AUDIO_CHANNEL_ID else "‚ùå", inline=True)
            embed.add_field(name="‚öôÔ∏è Sistema", value="Discord Audio API", inline=True)
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå A√ß√£o inv√°lida. Use: `play`, `stop` ou `status`")

    async def sistema_mensagens_automaticas(self):
        """Task que roda mensagens autom√°ticas periodicamente"""
        print("üì¢ Sistema de mensagens autom√°ticas iniciado")
        while self.is_playing_cycle:
            try:
                # Aguarda entre 20 a 35 segundos para dar tempo dos fades
                tempo_espera = random.randint(20, 35)
                print(f"‚è∞ Aguardando {tempo_espera} segundos para pr√≥xima mensagem...")
                await asyncio.sleep(tempo_espera)
                
                # Verifica se ainda est√° ativo e conectado
                if not self.is_playing_cycle or not self.voice_client or not self.voice_client.is_connected():
                    break
                
                # Sempre usa a primeira mensagem na primeira execu√ß√£o, depois aleat√≥ria
                if self.primeira_mensagem:
                    mensagem = self.mensagens_sistema[0]  # A primeira mensagem sempre
                    self.primeira_mensagem = False  # Pr√≥ximas ser√£o aleat√≥rias
                    print(f"üì¢ Iniciando com primeira mensagem: {mensagem}")
                else:
                    mensagem = random.choice(self.mensagens_sistema)
                    print(f"üì¢ Iniciando reprodu√ß√£o de mensagem autom√°tica: {mensagem}")
                
                # Marca que est√° tocando mensagem
                self.tocando_mensagem = True
                
                # Para a m√∫sica temporariamente
                await self.parar_musica_temporariamente()
                
                # Verifica se ElevenLabs est√° configurado
                print(f"üîç Debug - ELEVENLABS_API_KEY: {'‚úÖ Configurada' if ELEVENLABS_API_KEY else '‚ùå Vazia'}")
                print(f"üîç Debug - VOICE_ID: {'‚úÖ Configurada' if VOICE_ID else '‚ùå Vazia'}")
                
                if ELEVENLABS_API_KEY and VOICE_ID and ELEVENLABS_API_KEY.strip() != "":
                    print(f"üé§ Gerando √°udio para: {mensagem}")
                    # Gera o √°udio da mensagem
                    arquivo_audio = await self.gerar_audio_elevenlabs(mensagem)
                    
                    if arquivo_audio and self.voice_client:
                        print(f"‚úÖ Arquivo de √°udio gerado: {arquivo_audio}")
                        try:
                            # Reproduz a mensagem com fade in/out profissional
                            ffmpeg_options = {
                                'before_options': '-re',
                                'options': '-vn -filter:a "volume=0.85,afade=t=in:d=1.5,afade=t=out:st=6:d=2"'  # Fade mais suave e profissional
                            }
                            source = discord.FFmpegPCMAudio(arquivo_audio, **ffmpeg_options)
                            self.voice_client.play(source)
                            print(f"üîä Reproduzindo mensagem no Discord...")
                            
                            # Aguarda a mensagem terminar completamente
                            while self.voice_client.is_playing():
                                await asyncio.sleep(0.5)
                            
                            # Aguarda um pouco mais para garantir que terminou
                            await asyncio.sleep(1.5)
                            
                            print(f"‚úÖ Mensagem reproduzida com sucesso!")
                            
                            # N√ÉO remove arquivo se for do cache permanente
                            if arquivo_audio.startswith('temp_audio/'):
                                try:
                                    os.remove(arquivo_audio)
                                    print(f"üóëÔ∏è Arquivo tempor√°rio removido: {arquivo_audio}")
                                except:
                                    pass
                            else:
                                print(f"üíæ Arquivo mantido no cache: {arquivo_audio}")
                            
                        except Exception as e:
                            print(f"‚ö†Ô∏è Erro ao reproduzir mensagem autom√°tica: {e}")
                    else:
                        if not arquivo_audio:
                            print(f"‚ùå Falha ao gerar arquivo de √°udio")
                        if not self.voice_client:
                            print(f"‚ùå Voice client n√£o dispon√≠vel")
                        # Simula tempo de fala mesmo sem √°udio
                        await asyncio.sleep(5)
                else:
                    # Modo texto se n√£o tiver ElevenLabs
                    print(f"üì¢ [MODO TEXTO] {mensagem}")
                    await asyncio.sleep(4)  # Simula tempo de fala (um pouco menor)
                
                # Marca que terminou de tocar mensagem
                self.tocando_mensagem = False
                
                # Retoma a m√∫sica de espera
                if self.is_playing_cycle and self.voice_client:
                    await self.retomar_musica()
                    
            except asyncio.CancelledError:
                print("üì¢ Sistema de mensagens autom√°ticas cancelado")
                break
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no sistema de mensagens: {e}")
                self.tocando_mensagem = False  # Reseta flag em caso de erro
                # Tenta retomar m√∫sica mesmo em caso de erro
                if self.is_playing_cycle and self.voice_client:
                    await self.retomar_musica()
                await asyncio.sleep(30)  # Aguarda antes de tentar novamente

    @commands.command(name='parar_mensagens', aliases=['stop_messages'])
    @commands.has_permissions(manage_channels=True)
    async def parar_mensagens_automaticas(self, ctx):
        """Para apenas as mensagens autom√°ticas (mant√©m m√∫sica)"""
        if self.mensagens_task:
            self.mensagens_task.cancel()
            self.mensagens_task = None
            
            embed = discord.Embed(
                title="üì¢ Mensagens Autom√°ticas Paradas",
                description="Sistema de mensagens desativado. M√∫sica continua tocando.",
                color=discord.Color.orange()
            )
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå Sistema de mensagens n√£o estava ativo.")
    
    @commands.command(name='cache_info')
    async def info_cache(self, ctx):
        """Mostra informa√ß√µes sobre o cache de vozes"""
        cache_dir = 'cached_voices'
        backup_dir = 'backup_voices'
        
        # Conta arquivos no cache
        cache_files = glob.glob(os.path.join(cache_dir, '*.mp3'))
        backup_files = glob.glob(os.path.join(backup_dir, '*.mp3'))
        
        embed = discord.Embed(
            title="üíæ Informa√ß√µes do Cache de Voz",
            description="Sistema inteligente de cache para economizar cr√©ditos ElevenLabs",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üìä Cache Atual",
            value=f"**Arquivos:** {len(cache_files)}\n**Pasta:** `{cache_dir}/`",
            inline=True
        )
        
        embed.add_field(
            name="üîÑ Backups",
            value=f"**Arquivos:** {len(backup_files)}\n**Pasta:** `{backup_dir}/`",
            inline=True
        )
        
        embed.add_field(
            name="üí∞ Economia Estimada",
            value=f"**Cr√©ditos salvos:** ~{len(cache_files) * 1000} chars\n**Valor aprox:** ${len(cache_files) * 0.20:.2f}",
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è Configura√ß√µes",
            value=f"**Voz Atual:** `{VOICE_ID[:20]}...`\n**API:** ElevenLabs\n**Formato:** MP3",
            inline=False
        )
        
        embed.set_footer(text="üí° Cache reutiliza mensagens j√° geradas para economizar cr√©ditos")
        
        await ctx.send(embed=embed)

    @commands.command(name='listar_backups', aliases=['list_backups'])
    @commands.has_permissions(administrator=True)
    async def listar_backups(self, ctx):
        """Lista todos os backups de voz dispon√≠veis"""
        try:
            backup_dir = 'backup_voices'
            
            if not os.path.exists(backup_dir):
                await ctx.send("‚ùå Nenhum backup encontrado.")
                return
            
            backups = []
            for item in os.listdir(backup_dir):
                backup_path = os.path.join(backup_dir, item)
                if os.path.isdir(backup_path):
                    info_file = os.path.join(backup_path, 'backup_info.json')
                    if os.path.exists(info_file):
                        try:
                            with open(info_file, 'r') as f:
                                info = json.load(f)
                            backups.append({
                                'nome': item,
                                'info': info,
                                'path': backup_path
                            })
                        except:
                            pass
            
            if not backups:
                await ctx.send("‚ùå Nenhum backup v√°lido encontrado.")
                return
            
            embed = discord.Embed(
                title="üìÇ Backups de Voz Dispon√≠veis",
                description=f"Encontrados {len(backups)} backup(s)",
                color=discord.Color.blue()
            )
            
            for i, backup in enumerate(backups[:10], 1):  # M√°ximo 10
                info = backup['info']
                embed.add_field(
                    name=f"{i}. {backup['nome']}",
                    value=f"üéµ **Voz:** `{info.get('voice_id', 'N/A')[:15]}...`\n" +
                          f"üìÖ **Data:** {info.get('timestamp', 'N/A')}\n" +
                          f"üìÅ **Arquivos:** {info.get('total_files', 0)}",
                    inline=False
                )
            
            embed.set_footer(text="üí° Use !restaurar_backup <nome> para restaurar")
            await ctx.send(embed=embed)
            
        except Exception as e:
            await ctx.send(f"‚ùå Erro ao listar backups: {e}")

    @commands.command(name='reload_cache', aliases=['refresh_cache', 'atualizar_cache'])
    @commands.has_permissions(administrator=True)
    async def reload_cache(self, ctx, action: str = None):
        """
        Atualiza o cache de vozes e frases
        Uso: !reload_cache [clear|rebuild|info]
        """
        embed_inicial = discord.Embed(
            title="üîÑ Reload do Cache",
            description="Atualizando sistema de cache...",
            color=discord.Color.blue()
        )
        message = await ctx.send(embed=embed_inicial)
        
        try:
            if action == "clear":
                # Limpa todo o cache
                cache_dir = 'cached_voices'
                temp_dir = 'temp_audio'
                
                arquivos_removidos = 0
                
                # Remove arquivos do cache
                if os.path.exists(cache_dir):
                    for arquivo in os.listdir(cache_dir):
                        if arquivo.endswith('.mp3'):
                            os.remove(os.path.join(cache_dir, arquivo))
                            arquivos_removidos += 1
                
                # Remove arquivos tempor√°rios
                if os.path.exists(temp_dir):
                    for arquivo in os.listdir(temp_dir):
                        if arquivo.endswith('.mp3'):
                            os.remove(os.path.join(temp_dir, arquivo))
                            arquivos_removidos += 1
                
                embed = discord.Embed(
                    title="üóëÔ∏è Cache Limpo",
                    description=f"Cache completamente limpo!\n**Arquivos removidos:** {arquivos_removidos}",
                    color=discord.Color.orange()
                )
                embed.add_field(
                    name="üìù Pr√≥ximos Passos",
                    value="‚Ä¢ Use `!reload_cache rebuild` para recriar o cache\n‚Ä¢ Ou aguarde - ser√° recriado automaticamente conforme necess√°rio",
                    inline=False
                )
                
            elif action == "rebuild":
                # Reconstr√≥i todo o cache
                if not ELEVENLABS_API_KEY or not VOICE_ID:
                    embed = discord.Embed(
                        title="‚ùå Erro",
                        description="ElevenLabs n√£o configurado. N√£o √© poss√≠vel reconstruir cache.",
                        color=discord.Color.red()
                    )
                    await message.edit(embed=embed)
                    return
                
                embed_building = discord.Embed(
                    title="üî® Reconstruindo Cache",
                    description="Gerando todas as frases com a voz atual...",
                    color=discord.Color.blue()
                )
                await message.edit(embed=embed_building)
                
                # Limpa cache atual
                cache_dir = 'cached_voices'
                if os.path.exists(cache_dir):
                    for arquivo in os.listdir(cache_dir):
                        if arquivo.endswith('.mp3'):
                            os.remove(os.path.join(cache_dir, arquivo))
                
                # Reconstr√≥i todas as frases
                await self.gerar_todas_frases_nova_voz(VOICE_ID, ctx)
                
                embed = discord.Embed(
                    title="‚úÖ Cache Reconstru√≠do",
                    description=f"Cache completamente reconstru√≠do com a voz atual!\n**Mensagens:** {len(self.mensagens_sistema)}",
                    color=discord.Color.green()
                )
                
            elif action == "info":
                # Mostra informa√ß√µes detalhadas do cache
                cache_dir = 'cached_voices'
                temp_dir = 'temp_audio'
                backup_dir = 'backup_voices'
                
                cache_files = len([f for f in os.listdir(cache_dir) if f.endswith('.mp3')]) if os.path.exists(cache_dir) else 0
                temp_files = len([f for f in os.listdir(temp_dir) if f.endswith('.mp3')]) if os.path.exists(temp_dir) else 0
                backup_files = len(glob.glob(os.path.join(backup_dir, '**', '*.mp3'), recursive=True)) if os.path.exists(backup_dir) else 0
                
                embed = discord.Embed(
                    title="üìä Informa√ß√µes Detalhadas do Cache",
                    description="Estado atual do sistema de cache",
                    color=discord.Color.blue()
                )
                
                voice_display = f"{VOICE_ID[:15]}..." if VOICE_ID and len(VOICE_ID) > 15 else VOICE_ID if VOICE_ID else 'N/A'
                embed.add_field(
                    name="üíæ Cache Principal",
                    value=f"**Arquivos:** {cache_files}\n**Mensagens:** {len(self.mensagens_sistema)}\n**Voz Atual:** `{voice_display}`",
                    inline=True
                )
                
                embed.add_field(
                    name="üóÇÔ∏è Arquivos Tempor√°rios",
                    value=f"**Arquivos:** {temp_files}\n**Pasta:** `{temp_dir}/`",
                    inline=True
                )
                
                embed.add_field(
                    name="üîÑ Backups",
                    value=f"**Arquivos:** {backup_files}\n**Pasta:** `{backup_dir}/`",
                    inline=True
                )
                
                embed.add_field(
                    name="‚öôÔ∏è Status",
                    value=f"**ElevenLabs:** {'‚úÖ OK' if ELEVENLABS_API_KEY else '‚ùå N√£o configurado'}\n**Voz ID:** {'‚úÖ OK' if VOICE_ID else '‚ùå N√£o configurado'}",
                    inline=False
                )
                
                economia_estimada = cache_files * 0.20
                embed.add_field(
                    name="üí∞ Economia Estimada",
                    value=f"**Cr√©ditos salvos:** ~{cache_files * 1000} chars\n**Valor aprox:** ${economia_estimada:.2f} USD",
                    inline=False
                )
                
            else:
                # Reload padr√£o - atualiza mensagens sem regenerar tudo
                embed = discord.Embed(
                    title="üîÑ Cache Atualizado",
                    description="Sistema de cache recarregado com sucesso!",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="üìà Estat√≠sticas",
                    value=f"**Mensagens do sistema:** {len(self.mensagens_sistema)}\n**Cache mantido:** ‚úÖ\n**Configura√ß√µes:** Atualizadas",
                    inline=False
                )
                
                embed.add_field(
                    name="üõ†Ô∏è Op√ß√µes Avan√ßadas",
                    value="‚Ä¢ `!reload_cache clear` - Limpar cache\n‚Ä¢ `!reload_cache rebuild` - Reconstruir cache\n‚Ä¢ `!reload_cache info` - Informa√ß√µes detalhadas",
                    inline=False
                )
            
            await message.edit(embed=embed)
            
        except Exception as e:
            embed_erro = discord.Embed(
                title="‚ùå Erro no Reload do Cache",
                description=f"Erro: {str(e)}",
                color=discord.Color.red()
            )
            await message.edit(embed=embed_erro)

    @commands.command(name='trocar_musica', aliases=['change_music', 'nova_musica', 'music'])
    @commands.has_permissions(manage_channels=True)
    async def trocar_musica(self, ctx, *, nome_arquivo: str = None):
        """
        Troca a m√∫sica de fundo do sistema
        Uso: !trocar_musica <nome_do_arquivo.mp3>
        Ou: !trocar_musica (para listar m√∫sicas dispon√≠veis)
        """
        
        if not nome_arquivo:
            # Lista m√∫sicas dispon√≠veis
            arquivos_mp3 = []
            
            # Procura por arquivos MP3 no diret√≥rio principal
            for arquivo in os.listdir('.'):
                if arquivo.endswith('.mp3') and os.path.isfile(arquivo):
                    size = os.path.getsize(arquivo)
                    size_mb = size / (1024 * 1024)
                    arquivos_mp3.append({
                        'name': arquivo,
                        'size': f"{size_mb:.1f}MB",
                        'current': arquivo == self.musica_espera
                    })
            
            if not arquivos_mp3:
                await ctx.send("‚ùå Nenhum arquivo MP3 encontrado no diret√≥rio.")
                return
            
            embed = discord.Embed(
                title="üéµ M√∫sicas Dispon√≠veis",
                description="Selecione uma m√∫sica para usar como fundo",
                color=discord.Color.blue()
            )
            
            current_music = ""
            available_music = ""
            
            for i, music in enumerate(arquivos_mp3, 1):
                music_info = f"`{i}.` **{music['name']}** ({music['size']})"
                if music['current']:
                    current_music = f"üéµ **Atual:** {music_info}\n"
                else:
                    available_music += f"{music_info}\n"
            
            if current_music:
                embed.add_field(
                    name="üéµ M√∫sica Atual",
                    value=current_music,
                    inline=False
                )
            
            if available_music:
                embed.add_field(
                    name="üéº Outras M√∫sicas",
                    value=available_music,
                    inline=False
                )
            
            embed.add_field(
                name="üìù Como Usar",
                value="‚Ä¢ `!trocar_musica nome_arquivo.mp3`\n‚Ä¢ Para adicionar novas m√∫sicas, coloque arquivos MP3 na pasta do bot",
                inline=False
            )
            
            embed.set_footer(text="üí° A m√∫sica ser√° trocada automaticamente se o sistema estiver ativo")
            await ctx.send(embed=embed)
            return
        
        # Verifica se o arquivo existe
        if not os.path.exists(nome_arquivo):
            # Procura por nome parcial
            arquivos_encontrados = []
            for arquivo in os.listdir('.'):
                if arquivo.endswith('.mp3') and nome_arquivo.lower() in arquivo.lower():
                    arquivos_encontrados.append(arquivo)
            
            if len(arquivos_encontrados) == 1:
                nome_arquivo = arquivos_encontrados[0]
            elif len(arquivos_encontrados) > 1:
                embed = discord.Embed(
                    title="üîç V√°rios Arquivos Encontrados",
                    description=f"Encontrei {len(arquivos_encontrados)} arquivos com '{nome_arquivo}':",
                    color=discord.Color.orange()
                )
                for i, arquivo in enumerate(arquivos_encontrados[:10], 1):
                    embed.add_field(
                        name=f"{i}. {arquivo}",
                        value=f"Use: `!trocar_musica {arquivo}`",
                        inline=False
                    )
                await ctx.send(embed=embed)
                return
            else:
                await ctx.send(f"‚ùå Arquivo `{nome_arquivo}` n√£o encontrado. Use `!trocar_musica` para ver as op√ß√µes.")
                return
        
        # Verifica se √© um arquivo MP3 v√°lido
        if not nome_arquivo.endswith('.mp3'):
            await ctx.send("‚ùå Apenas arquivos MP3 s√£o suportados.")
            return
        
        # Salva m√∫sica anterior
        musica_anterior = self.musica_espera
        
        try:
            # Atualiza a m√∫sica
            self.musica_espera = nome_arquivo
            
            # Se o sistema estiver ativo, reinicia com a nova m√∫sica
            if self.is_playing_cycle and self.voice_client:
                embed_trocando = discord.Embed(
                    title="üîÑ Trocando M√∫sica",
                    description="Aplicando nova m√∫sica ao sistema...",
                    color=discord.Color.blue()
                )
                message = await ctx.send(embed=embed_trocando)
                
                # Para a m√∫sica atual
                if self.voice_client.is_playing():
                    self.voice_client.stop()
                
                # Aguarda um pouco e inicia a nova m√∫sica
                await asyncio.sleep(1)
                sucesso = await self.tocar_musica_espera()
                
                if sucesso:
                    embed = discord.Embed(
                        title="‚úÖ M√∫sica Trocada",
                        description="Nova m√∫sica aplicada com sucesso!",
                        color=discord.Color.green()
                    )
                    embed.add_field(
                        name="üéµ M√∫sica Anterior",
                        value=f"`{musica_anterior}`",
                        inline=True
                    )
                    embed.add_field(
                        name="üé∂ Nova M√∫sica",
                        value=f"`{nome_arquivo}`",
                        inline=True
                    )
                    embed.add_field(
                        name="üìä Status",
                        value="‚úÖ Sistema ativo com nova m√∫sica",
                        inline=False
                    )
                else:
                    # Reverte se deu erro
                    self.musica_espera = musica_anterior
                    embed = discord.Embed(
                        title="‚ùå Erro ao Trocar M√∫sica",
                        description="N√£o foi poss√≠vel reproduzir a nova m√∫sica. Revertendo...",
                        color=discord.Color.red()
                    )
                
                await message.edit(embed=embed)
            else:
                # Sistema n√£o est√° ativo, apenas atualiza a configura√ß√£o
                embed = discord.Embed(
                    title="‚úÖ M√∫sica Configurada",
                    description="Nova m√∫sica definida! Ser√° usada quando o sistema for iniciado.",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="üé∂ Nova M√∫sica",
                    value=f"`{nome_arquivo}`",
                    inline=False
                )
                embed.add_field(
                    name="üìä Status",
                    value="‚è∏Ô∏è Sistema pausado - m√∫sica ser√° aplicada quando iniciar",
                    inline=False
                )
                await ctx.send(embed=embed)
            
        except Exception as e:
            # Reverte em caso de erro
            self.musica_espera = musica_anterior
            embed_erro = discord.Embed(
                title="‚ùå Erro ao Trocar M√∫sica",
                description=f"Erro: {str(e)}",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed_erro)

    @commands.command(name='reiniciar_sistema', aliases=['restart_voice', 'reiniciar_voz'])
    @commands.has_permissions(manage_channels=True)
    async def reiniciar_sistema_voz(self, ctx):
        """Reinicia o sistema de voz (desconecta e conecta novamente)"""
        await ctx.send("‚ôªÔ∏è Reiniciando sistema de voz...")
        await self.parar_sistema_voz(ctx)
        await asyncio.sleep(2)
        await self.iniciar_sistema_voz(ctx)

    @commands.command(name='ativar_sistema_voz', aliases=['ativar_voz'])
    @commands.has_permissions(administrator=True)
    async def ativar_sistema_voz(self, ctx):
        """Ativa manualmente o sistema de voz e conecta ao canal configurado"""
        await ctx.send("üîÑ Ativando sistema de voz...")
        await self.iniciar_sistema_voz(ctx)

    @commands.command(name='desativar_sistema_voz', aliases=['desativar_voz'])
    @commands.has_permissions(administrator=True)
    async def desativar_sistema_voz(self, ctx):
        """Desativa manualmente o sistema de voz e desconecta do canal"""
        await ctx.send("üõë Desativando sistema de voz...")
        await self.parar_sistema_voz(ctx)

async def setup(bot):
    await bot.add_cog(VoiceSystem(bot)) 